Index: src/Presentacion/TetrisMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Presentacion;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.io.*;\r\nimport Dominio.*;\r\n\r\npublic class TetrisMain extends JFrame {\r\n    //Tamano ventana\r\n    private final int ANCHO = Toolkit.getDefaultToolkit().getScreenSize().width / 2 - 100;\r\n    private final int ALTO = Toolkit.getDefaultToolkit().getScreenSize().height / 2;\r\n    private JPanel mainPanel;\r\n    //Menu\r\n    private JMenuBar menuExit;\r\n    private JMenu archivo;\r\n    private JMenuItem newGame;\r\n    private JMenuItem saveGame;\r\n    private JMenuItem openGame;\r\n    private JMenuItem importGame;\r\n    private JMenuItem exportGame;\r\n    private JMenuItem exitGame;\r\n    private JFileChooser fileChooser;\r\n    //Panel bottons\r\n    private JPanel panelBuffos;\r\n    private JLabel numberBuffos;\r\n    private JSpinner spinnerBuffos;\r\n    private JButton start;\r\n    private JButton credits;\r\n    private JButton exit;\r\n    private JButton players;\r\n    private JPanel botones;\r\n    //Panel images\r\n    private JPanel iconTetris;\r\n    private ImageIcon icon;\r\n    private JLabel labelIcon;\r\n    //Mode\r\n    private JComboBox comboMode;\r\n\r\n    public TetrisMain(String title) {\r\n        super(title);\r\n        prepareElementosMain();\r\n        prepareAccionesMain();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        TetrisMain gui = new TetrisMain(\"Tetris Game\");\r\n        gui.setVisible(true);\r\n    }\r\n    private void prepareElementosMain(){\r\n        setPreferredSize(new Dimension(ANCHO,ALTO));\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        pack();\r\n        setLocationRelativeTo(null);\r\n        setResizable(false);\r\n        setLayout(new BorderLayout());\r\n        prepareElementosM1();\r\n        agregueElementosM1();\r\n        prepareElementosChooser();\r\n    }\r\n\r\n    private void prepareElementosM1(){\r\n        iconTetris = new JPanel();\r\n        icon = new ImageIcon(\"tetris.jpg\");\r\n        labelIcon = new JLabel(null,icon ,SwingConstants.CENTER);\r\n        iconTetris.add(labelIcon);\r\n        iconTetris.setBackground(Color.BLACK);\r\n        botones = new JPanel(new GridLayout(1,5));\r\n        comboMode = new JComboBox();\r\n        players = new JButton(\"Players\");\r\n        credits = new JButton(\"Credits\");\r\n        panelBuffos = new JPanel(new GridLayout(1,2));\r\n        numberBuffos = new JLabel(\"# Buffos:\");\r\n        spinnerBuffos = new JSpinner();\r\n        spinnerBuffos.setModel(new SpinnerNumberModel(0, 0, 50, 1));\r\n        start = new JButton(\"Start\");\r\n        exit = new JButton(\"Exit\");\r\n        menuExit = new JMenuBar();\r\n        archivo = new JMenu(\"File\");\r\n        newGame = new JMenuItem(\"New\");\r\n        saveGame = new JMenuItem(\"Save\");\r\n        openGame = new JMenuItem(\"Open\");\r\n        importGame = new JMenuItem(\"Import\");\r\n        exportGame = new JMenuItem(\"Export\");\r\n        exitGame = new JMenuItem(\"Exit\");\r\n    }\r\n\r\n    private void agregueElementosM1(){\r\n        panelBuffos.add(numberBuffos);\r\n        panelBuffos.add(spinnerBuffos);\r\n        botones.add(comboMode);\r\n        botones.add(players);\r\n        botones.add(panelBuffos);\r\n        botones.add(credits);\r\n        botones.add(start);\r\n        botones.add(exit);\r\n        add(iconTetris,BorderLayout.CENTER);\r\n        add(botones,BorderLayout.SOUTH);\r\n        menuExit.add(archivo);\r\n        archivo.add(newGame);\r\n        archivo.addSeparator();\r\n        archivo.add(openGame);\r\n        archivo.addSeparator();\r\n        archivo.add(saveGame);\r\n        archivo.addSeparator();\r\n        archivo.add(importGame);\r\n        archivo.addSeparator();\r\n        archivo.add(exportGame);\r\n        archivo.addSeparator();\r\n        archivo.add(exitGame);\r\n        setJMenuBar(menuExit);\r\n        comboMode.addItem(\"Game Mode\");\r\n        comboMode.addItem(\"Player\");\r\n        comboMode.addItem(\"Player vs Player\");\r\n        comboMode.addItem(\"Player vs Machine\");\r\n\r\n    }\r\n\r\n\r\n    private void prepareAccionesMain(){\r\n        prepareAccionesMenu();\r\n    }\r\n\r\n    private void prepareAccionesMenu() {\r\n        credits.addActionListener(e -> irACreditos());\r\n        exit.addActionListener(e -> salga());\r\n        exitGame.addActionListener(e -> salga());\r\n        saveGame.addActionListener(e -> save());\r\n        openGame.addActionListener(e -> open());\r\n        start.addActionListener(e -> startGame());\r\n\r\n        players.addActionListener(e -> player());\r\n    }\r\n    private void startGame(){\r\n        setVisible(false);\r\n        Tetris1 frame = new Tetris1(this,\"Tetris Game\");\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    private void irACreditos() {\r\n        setVisible(false);\r\n        Credits frame = new Credits(\"Credits\");\r\n        frame.setVisible(true);\r\n    }\r\n\r\n\r\n    private void prepareElementosChooser() {\r\n        fileChooser = new JFileChooser();\r\n    }\r\n\r\n    private void save() {\r\n        int action = fileChooser.showSaveDialog(saveGame);\r\n        if (action == JFileChooser.APPROVE_OPTION) {\r\n            File archivo = fileChooser.getSelectedFile();\r\n            JOptionPane.showMessageDialog(null, \"File \"+ archivo.getName() +\" saved\" + \"\\nFuncionalidad Salvar en construccion\");\r\n        }\r\n    }\r\n\r\n    private void open() {\r\n        int action = fileChooser.showOpenDialog(openGame);\r\n        if (action == JFileChooser.APPROVE_OPTION) {\r\n            File archivo = fileChooser.getSelectedFile();\r\n            JOptionPane.showMessageDialog(null, \"File \" + archivo.getName() + \" opened \"  +\"\\nFuncionalidad Abir en construccion\");\r\n        }\r\n    }\r\n\r\n    private void salga() {\r\n        if (JOptionPane.showConfirmDialog(rootPane, \"Do you want to log out?\",\r\n                \"Get out of the system\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private void vsMachine(){\r\n        JOptionPane.showInputDialog(null, \"Player Nickname.\", \"Player Information\", JOptionPane.PLAIN_MESSAGE);\r\n        String [] options= {\"Principiant\", \"Expert\", \"Cancel\"};\r\n        JOptionPane.showOptionDialog(null, \"Choose machine level.\", \"Machine Level\",\r\n                0, JOptionPane.QUESTION_MESSAGE, null, options, \"Principiant\");\r\n    }\r\n    private void playerVsPlayer(){\r\n        JOptionPane.showInputDialog(null, \"Player # 1 Nickname.\", \"Players Information\", JOptionPane.PLAIN_MESSAGE);\r\n        JOptionPane.showInputDialog(null, \"Player # 2 Nickname.\", \"Players Information\", JOptionPane.PLAIN_MESSAGE);\r\n    }\r\n    public String player(){\r\n        String nickname = (JOptionPane.showInputDialog(null,\r\n                \"Player Nickname.\", \"Player Information\",\r\n                JOptionPane.PLAIN_MESSAGE));\r\n        //JOptionPane.showMessageDialog(null, \"Your Nickname is: \"+nickname, \"Nickname\", JOptionPane.PLAIN_MESSAGE);\r\n        return nickname;\r\n    }\r\n//    private void bottonPlayers() throws TetrisException{\r\n//        String selected =(String) comboMode.getSelectedItem();\r\n//        switch (selected) {\r\n//\r\n//            case KeyEvent.VK_P -> player();\r\n//            case KeyEvent.VK_LEFT -> playerVsPlayer();\r\n//            case KeyEvent.VK_RIGHT -> vsMachine();\r\n//        }\r\n//    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Presentacion/TetrisMain.java b/src/Presentacion/TetrisMain.java
--- a/src/Presentacion/TetrisMain.java	(revision 36c6fc08615a57ae9b46352eed7f5c6bb7fad611)
+++ b/src/Presentacion/TetrisMain.java	(date 1637514091187)
@@ -128,7 +128,7 @@
         openGame.addActionListener(e -> open());
         start.addActionListener(e -> startGame());
 
-        players.addActionListener(e -> player());
+        //players.addActionListener(e -> player());
     }
     private void startGame(){
         setVisible(false);
@@ -181,10 +181,8 @@
         JOptionPane.showInputDialog(null, "Player # 2 Nickname.", "Players Information", JOptionPane.PLAIN_MESSAGE);
     }
     public String player(){
-        String nickname = (JOptionPane.showInputDialog(null,
-                "Player Nickname.", "Player Information",
+        String nickname = (JOptionPane.showInputDialog(null, "Player Nickname.", "Player Information",
                 JOptionPane.PLAIN_MESSAGE));
-        //JOptionPane.showMessageDialog(null, "Your Nickname is: "+nickname, "Nickname", JOptionPane.PLAIN_MESSAGE);
         return nickname;
     }
 //    private void bottonPlayers() throws TetrisException{
Index: src/Presentacion/Tetris1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Presentacion;\r\n\r\nimport Dominio.Tetrominoe;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.border.CompoundBorder;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.border.TitledBorder;\r\nimport java.awt.*;\r\nimport java.awt.Font;\r\n\r\npublic class Tetris1 extends JFrame {\r\n    //Panel NewFigure\r\n    TetrisMain main;\r\n    NewFigurePanel newFigure;\r\n    //Panel Board\r\n    Board board;\r\n    //Tamano ventana\r\n    private final int ANCHO = 566;\r\n    private final int ALTO = 568;\r\n\r\n    public Tetris1(TetrisMain main, String title) {\r\n        super(title);\r\n        this.main = main;\r\n        System.out.println(ANCHO);\r\n        System.out.println(ALTO);\r\n        prepareElementos();\r\n    }\r\n//    public static void main(String[] args){\r\n//        Tetris1 gui = new Tetris1(\"Tetris Game\");\r\n//        gui.setVisible(true);\r\n//    }\r\n\r\n    public void prepareElementos(){\r\n        setPreferredSize(new Dimension(ANCHO,ALTO));\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        pack();\r\n        setResizable(false);\r\n        setLayout(new BorderLayout());\r\n        cargueElementos();\r\n        configureElementos();\r\n        agregueElementos();\r\n        setLocationRelativeTo(null);\r\n    }\r\n    private void cargueElementos(){\r\n        newFigure = new NewFigurePanel(this);\r\n        board = new Board(this);\r\n\r\n    }\r\n    private void configureElementos(){\r\n        board.setBorder(new CompoundBorder(new EmptyBorder(5, 5, 5, 5),\r\n                new TitledBorder(\"Board\")));\r\n        newFigure.setBorder(new CompoundBorder(new EmptyBorder(5,5,5,5),\r\n                new TitledBorder(\"Game Info\")));\r\n    }\r\n    private void agregueElementos(){\r\n        add(board,BorderLayout.CENTER);\r\n        add(newFigure,BorderLayout.WEST);\r\n    }\r\n    public String getNickname(){\r\n        return main.player();\r\n    }\r\n\r\n    public boolean isPaused(){\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    public boolean isNewGame() {\r\n        return false;\r\n    }\r\n\r\n    public boolean isGameOver() {\r\n        return false;\r\n    }\r\n\r\n    public Tetrominoe getPieceType() {\r\n        return null;\r\n    }\r\n\r\n    public int getPieceCol() {\r\n        return 0;\r\n    }\r\n\r\n    public int getPieceRow() {\r\n        return 0;\r\n    }\r\n\r\n    public int getPieceRotation() {\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Presentacion/Tetris1.java b/src/Presentacion/Tetris1.java
--- a/src/Presentacion/Tetris1.java	(revision 36c6fc08615a57ae9b46352eed7f5c6bb7fad611)
+++ b/src/Presentacion/Tetris1.java	(date 1637513984366)
@@ -1,6 +1,6 @@
 package Presentacion;
 
-import Dominio.Tetrominoe;
+//import Dominio.Tetrominoe;
 
 import javax.swing.*;
 import javax.swing.border.CompoundBorder;
@@ -75,9 +75,6 @@
         return false;
     }
 
-    public Tetrominoe getPieceType() {
-        return null;
-    }
 
     public int getPieceCol() {
         return 0;
Index: src/Dominio/Tetrominoe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Dominio;\r\n\r\nimport Presentacion.Board;\r\n\r\nimport java.awt.*;\r\n\r\npublic enum Tetrominoe {\r\n    TypeI(new Color(Board.COLORMIN, Board.COLORMAX, Board.COLORMAX), 4, 4, 1, new boolean[][] {\r\n        {\r\n                false,\tfalse,\tfalse,\tfalse,\r\n                true,\ttrue,\ttrue,\ttrue,\r\n                false,\tfalse,\tfalse,\tfalse,\r\n                false,\tfalse,\tfalse,\tfalse,\r\n        },\r\n        {\r\n                false,\tfalse,\ttrue,\tfalse,\r\n                false,\tfalse,\ttrue,\tfalse,\r\n                false,\tfalse,\ttrue,\tfalse,\r\n                false,\tfalse,\ttrue,\tfalse,\r\n        },\r\n        {\r\n                false,\tfalse,\tfalse,\tfalse,\r\n                false,\tfalse,\tfalse,\tfalse,\r\n                true,\ttrue,\ttrue,\ttrue,\r\n                false,\tfalse,\tfalse,\tfalse,\r\n        },\r\n        {\r\n                false,\ttrue,\tfalse,\tfalse,\r\n                false,\ttrue,\tfalse,\tfalse,\r\n                false,\ttrue,\tfalse,\tfalse,\r\n                false,\ttrue,\tfalse,\tfalse,\r\n        }\r\n    }),\r\n    /**\r\n     * Piece TypeL.\r\n     */\r\n    TypeL(new Color(Board.COLORMAX, 127, Board.COLORMIN), 3, 3, 2, new boolean[][] {\r\n            {\r\n                    false,\tfalse,\ttrue,\r\n                    true,\ttrue,\ttrue,\r\n                    false,\tfalse,\tfalse,\r\n            },\r\n            {\r\n                    false,\ttrue,\tfalse,\r\n                    false,\ttrue,\tfalse,\r\n                    false,\ttrue,\ttrue,\r\n            },\r\n            {\r\n                    false,\tfalse,\tfalse,\r\n                    true,\ttrue,\ttrue,\r\n                    true,\tfalse,\tfalse,\r\n            },\r\n            {\r\n                    true,\ttrue,\tfalse,\r\n                    false,\ttrue,\tfalse,\r\n                    false,\ttrue,\tfalse,\r\n            }\r\n    }),\r\n\r\n    /**\r\n     * Piece TypeO.\r\n     */\r\n    TypeO(new Color(Board.COLORMAX, Board.COLORMAX, Board.COLORMIN), 2, 2, 2, new boolean[][] {\r\n            {\r\n                    true,\ttrue,\r\n                    true,\ttrue,\r\n            },\r\n            {\r\n                    true,\ttrue,\r\n                    true,\ttrue,\r\n            },\r\n            {\r\n                    true,\ttrue,\r\n                    true,\ttrue,\r\n            },\r\n            {\r\n                    true,\ttrue,\r\n                    true,\ttrue,\r\n            }\r\n    }),\r\n\r\n    /**\r\n     * Piece TypeS.\r\n     */\r\n    TypeS(new Color(Board.COLORMIN, Board.COLORMAX, Board.COLORMIN), 3, 3, 2, new boolean[][] {\r\n            {\r\n                    false,\ttrue,\ttrue,\r\n                    true,\ttrue,\tfalse,\r\n                    false,\tfalse,\tfalse,\r\n            },\r\n            {\r\n                    false,\ttrue,\tfalse,\r\n                    false,\ttrue,\ttrue,\r\n                    false,\tfalse,\ttrue,\r\n            },\r\n            {\r\n                    false,\tfalse,\tfalse,\r\n                    false,\ttrue,\ttrue,\r\n                    true,\ttrue,\tfalse,\r\n            },\r\n            {\r\n                    true,\tfalse,\tfalse,\r\n                    true,\ttrue,\tfalse,\r\n                    false,\ttrue,\tfalse,\r\n            }\r\n    }),\r\n\r\n    /**\r\n     * Piece TypeT.\r\n     */\r\n    TypeT(new Color(128, Board.COLORMIN, 128), 3, 3, 2, new boolean[][] {\r\n            {\r\n                    false,\ttrue,\tfalse,\r\n                    true,\ttrue,\ttrue,\r\n                    false,\tfalse,\tfalse,\r\n            },\r\n            {\r\n                    false,\ttrue,\tfalse,\r\n                    false,\ttrue,\ttrue,\r\n                    false,\ttrue,\tfalse,\r\n            },\r\n            {\r\n                    false,\tfalse,\tfalse,\r\n                    true,\ttrue,\ttrue,\r\n                    false,\ttrue,\tfalse,\r\n            },\r\n            {\r\n                    false,\ttrue,\tfalse,\r\n                    true,\ttrue,\tfalse,\r\n                    false,\ttrue,\tfalse,\r\n            }\r\n    }),\r\n\r\n    ;\r\n    private final Color baseColor;\r\n    private final Color lightColor;\r\n    private final Color darkColor;\r\n    private final int dimension;\r\n    private final boolean[][] tiles;\r\n    private final int cols;\r\n    private final int rows;\r\n    private final int spawnCol;\r\n    private final int spawnRow;\r\n\r\n    Tetrominoe(Color color, int dimension, int cols, int rows, boolean[][] tiles) {\r\n        this.baseColor = color;\r\n        this.lightColor = color.brighter();\r\n        this.darkColor = color.darker();\r\n        this.dimension = dimension;\r\n        this.tiles = tiles;\r\n        this.cols = cols;\r\n        this.rows = rows;\r\n\r\n        this.spawnCol = 5 - (dimension >> 1);\r\n        this.spawnRow = getTopInset(0);\r\n    }\r\n\r\n    private int getTopInset(int i) {\r\n        return 0;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Dominio/Tetrominoe.java b/src/Dominio/Tetrominoe.java
--- a/src/Dominio/Tetrominoe.java	(revision 36c6fc08615a57ae9b46352eed7f5c6bb7fad611)
+++ b/src/Dominio/Tetrominoe.java	(date 1637513767215)
@@ -1,161 +1,186 @@
-package Dominio;
-
-import Presentacion.Board;
-
-import java.awt.*;
-
-public enum Tetrominoe {
-    TypeI(new Color(Board.COLORMIN, Board.COLORMAX, Board.COLORMAX), 4, 4, 1, new boolean[][] {
-        {
-                false,	false,	false,	false,
-                true,	true,	true,	true,
-                false,	false,	false,	false,
-                false,	false,	false,	false,
-        },
-        {
-                false,	false,	true,	false,
-                false,	false,	true,	false,
-                false,	false,	true,	false,
-                false,	false,	true,	false,
-        },
-        {
-                false,	false,	false,	false,
-                false,	false,	false,	false,
-                true,	true,	true,	true,
-                false,	false,	false,	false,
-        },
-        {
-                false,	true,	false,	false,
-                false,	true,	false,	false,
-                false,	true,	false,	false,
-                false,	true,	false,	false,
-        }
-    }),
-    /**
-     * Piece TypeL.
-     */
-    TypeL(new Color(Board.COLORMAX, 127, Board.COLORMIN), 3, 3, 2, new boolean[][] {
-            {
-                    false,	false,	true,
-                    true,	true,	true,
-                    false,	false,	false,
-            },
-            {
-                    false,	true,	false,
-                    false,	true,	false,
-                    false,	true,	true,
-            },
-            {
-                    false,	false,	false,
-                    true,	true,	true,
-                    true,	false,	false,
-            },
-            {
-                    true,	true,	false,
-                    false,	true,	false,
-                    false,	true,	false,
-            }
-    }),
-
-    /**
-     * Piece TypeO.
-     */
-    TypeO(new Color(Board.COLORMAX, Board.COLORMAX, Board.COLORMIN), 2, 2, 2, new boolean[][] {
-            {
-                    true,	true,
-                    true,	true,
-            },
-            {
-                    true,	true,
-                    true,	true,
-            },
-            {
-                    true,	true,
-                    true,	true,
-            },
-            {
-                    true,	true,
-                    true,	true,
-            }
-    }),
-
-    /**
-     * Piece TypeS.
-     */
-    TypeS(new Color(Board.COLORMIN, Board.COLORMAX, Board.COLORMIN), 3, 3, 2, new boolean[][] {
-            {
-                    false,	true,	true,
-                    true,	true,	false,
-                    false,	false,	false,
-            },
-            {
-                    false,	true,	false,
-                    false,	true,	true,
-                    false,	false,	true,
-            },
-            {
-                    false,	false,	false,
-                    false,	true,	true,
-                    true,	true,	false,
-            },
-            {
-                    true,	false,	false,
-                    true,	true,	false,
-                    false,	true,	false,
-            }
-    }),
-
-    /**
-     * Piece TypeT.
-     */
-    TypeT(new Color(128, Board.COLORMIN, 128), 3, 3, 2, new boolean[][] {
-            {
-                    false,	true,	false,
-                    true,	true,	true,
-                    false,	false,	false,
-            },
-            {
-                    false,	true,	false,
-                    false,	true,	true,
-                    false,	true,	false,
-            },
-            {
-                    false,	false,	false,
-                    true,	true,	true,
-                    false,	true,	false,
-            },
-            {
-                    false,	true,	false,
-                    true,	true,	false,
-                    false,	true,	false,
-            }
-    }),
-
-    ;
-    private final Color baseColor;
-    private final Color lightColor;
-    private final Color darkColor;
-    private final int dimension;
-    private final boolean[][] tiles;
-    private final int cols;
-    private final int rows;
-    private final int spawnCol;
-    private final int spawnRow;
-
-    Tetrominoe(Color color, int dimension, int cols, int rows, boolean[][] tiles) {
-        this.baseColor = color;
-        this.lightColor = color.brighter();
-        this.darkColor = color.darker();
-        this.dimension = dimension;
-        this.tiles = tiles;
-        this.cols = cols;
-        this.rows = rows;
-
-        this.spawnCol = 5 - (dimension >> 1);
-        this.spawnRow = getTopInset(0);
-    }
-
-    private int getTopInset(int i) {
-        return 0;
-    }
-}
\ No newline at end of file
+//package Dominio;
+//
+//import Ayudas.BoardPanel;
+//
+//import java.awt.*;
+//
+//public enum Tetrominoe {
+//    TypeI(new Color(BoardPanel.COLOR_MIN, BoardPanel.COLOR_MAX, BoardPanel.COLOR_MAX), 4, 4, 1, new boolean[][] {
+//        {
+//                false,	false,	false,	false,
+//                true,	true,	true,	true,
+//                false,	false,	false,	false,
+//                false,	false,	false,	false,
+//        },
+//        {
+//                false,	false,	true,	false,
+//                false,	false,	true,	false,
+//                false,	false,	true,	false,
+//                false,	false,	true,	false,
+//        },
+//        {
+//                false,	false,	false,	false,
+//                false,	false,	false,	false,
+//                true,	true,	true,	true,
+//                false,	false,	false,	false,
+//        },
+//        {
+//                false,	true,	false,	false,
+//                false,	true,	false,	false,
+//                false,	true,	false,	false,
+//                false,	true,	false,	false,
+//        }
+//    }),
+//
+//    /**
+//     * Piece TypeJ.
+//     */
+//    TypeJ(new Color(BoardPanel.COLOR_MIN, BoardPanel.COLOR_MIN, BoardPanel.COLOR_MAX), 3, 3, 2, new boolean[][] {
+//        {
+//                true,	false,	false,
+//                true,	true,	true,
+//                false,	false,	false,
+//        },
+//        {
+//                false,	true,	true,
+//                false,	true,	false,
+//                false,	true,	false,
+//        },
+//        {
+//                false,	false,	false,
+//                true,	true,	true,
+//                false,	false,	true,
+//        },
+//        {
+//                false,	true,	false,
+//                false,	true,	false,
+//                true,	true,	false,
+//        }
+//    }),
+//
+//    /**
+//     * Piece TypeL.
+//     */
+//    TypeL(new Color(BoardPanel.COLOR_MAX, 127, BoardPanel.COLOR_MIN), 3, 3, 2, new boolean[][] {
+//            {
+//                    false,	false,	true,
+//                    true,	true,	true,
+//                    false,	false,	false,
+//            },
+//            {
+//                    false,	true,	false,
+//                    false,	true,	false,
+//                    false,	true,	true,
+//            },
+//            {
+//                    false,	false,	false,
+//                    true,	true,	true,
+//                    true,	false,	false,
+//            },
+//            {
+//                    true,	true,	false,
+//                    false,	true,	false,
+//                    false,	true,	false,
+//            }
+//    }),
+//
+//    /**
+//     * Piece TypeO.
+//     */
+//    TypeO(new Color(BoardPanel.COLOR_MAX, BoardPanel.COLOR_MAX, BoardPanel.COLOR_MIN), 2, 2, 2, new boolean[][] {
+//            {
+//                    true,	true,
+//                    true,	true,
+//            },
+//            {
+//                    true,	true,
+//                    true,	true,
+//            },
+//            {
+//                    true,	true,
+//                    true,	true,
+//            },
+//            {
+//                    true,	true,
+//                    true,	true,
+//            }
+//    }),
+//
+//    /**
+//     * Piece TypeS.
+//     */
+//    TypeS(new Color(BoardPanel.COLOR_MIN, BoardPanel.COLOR_MAX, BoardPanel.COLOR_MIN), 3, 3, 2, new boolean[][] {
+//            {
+//                    false,	true,	true,
+//                    true,	true,	false,
+//                    false,	false,	false,
+//            },
+//            {
+//                    false,	true,	false,
+//                    false,	true,	true,
+//                    false,	false,	true,
+//            },
+//            {
+//                    false,	false,	false,
+//                    false,	true,	true,
+//                    true,	true,	false,
+//            },
+//            {
+//                    true,	false,	false,
+//                    true,	true,	false,
+//                    false,	true,	false,
+//            }
+//    }),
+//
+//    /**
+//     * Piece TypeT.
+//     */
+//    TypeT(new Color(128, BoardPanel.COLOR_MIN, 128), 3, 3, 2, new boolean[][] {
+//            {
+//                    false,	true,	false,
+//                    true,	true,	true,
+//                    false,	false,	false,
+//            },
+//            {
+//                    false,	true,	false,
+//                    false,	true,	true,
+//                    false,	true,	false,
+//            },
+//            {
+//                    false,	false,	false,
+//                    true,	true,	true,
+//                    false,	true,	false,
+//            },
+//            {
+//                    false,	true,	false,
+//                    true,	true,	false,
+//                    false,	true,	false,
+//            }
+//    }),
+//
+//    /**
+//     * Piece TypeZ.
+//     */
+//    TypeZ(new Color(BoardPanel.COLOR_MAX, BoardPanel.COLOR_MIN, BoardPanel.COLOR_MIN), 3, 3, 2, new boolean[][] {
+//            {
+//                    true,	true,	false,
+//                    false,	true,	true,
+//                    false,	false,	false,
+//            },
+//            {
+//                    false,	false,	true,
+//                    false,	true,	true,
+//                    false,	true,	false,
+//            },
+//            {
+//                    false,	false,	false,
+//                    true,	true,	false,
+//                    false,	true,	true,
+//            },
+//            {
+//                    false,	true,	false,
+//                    true,	true,	false,
+//                    true,	false,	false,
+//            }
+//    });
+//}
\ No newline at end of file
Index: src/Presentacion/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Presentacion;\r\n\r\nimport Dominio.Tetrominoe;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class Board extends JPanel{\r\n    private static final int BORDERWIDTH = 5;\r\n    private static final int VISIBLEROWCOUNT = 20;\r\n    private static final int HIDDENROWCOUNT = 2;\r\n    public static final int COLORMIN = 35;\r\n    public static final int COLORMAX = 255 - COLORMIN;\r\n    public static final int NCOLS = 10;\r\n    public static final int NROWS = VISIBLEROWCOUNT + HIDDENROWCOUNT;\r\n    public static final int TILESIZE = 24;\r\n    public static final int BORDERTILEWIDTH = 4;\r\n    public static final int MOVEMENT = 25;\r\n    public static final int SHADEWIDTH = 4;\r\n    private static final int CENTERX = NCOLS * TILESIZE / 2;\r\n    private static final int CENTERY = VISIBLEROWCOUNT * TILESIZE / 2;\r\n    public static final int PANELWIDTH = NCOLS * TILESIZE + BORDERWIDTH * 2;\r\n    public static final int PANELHEIGHT = VISIBLEROWCOUNT * TILESIZE + BORDERWIDTH *2;\r\n    private static final Font LARGEFONT = new Font(\"Arial\",Font.ITALIC,18);\r\n    private static final Font SMALLFONT = new Font(\"Arial\",Font.ITALIC,12);\r\n    private Tetris1 tetris;\r\n    private Tetrominoe[][] tiles;\r\n    private Color[][] shape = {\r\n            {Color.RED,Color.RED,Color.RED},\r\n            {null,Color.RED,null}\r\n    };\r\n    private Timer looper;\r\n    private int x = 4,y = 0,z = 3;\r\n\r\n    public Board(Tetris1 tetris){\r\n        //this.tetris = tetris;\r\n        //this.tiles = new Tetrominoe[NROWS][NCOLS];\r\n        setPreferredSize(new Dimension(PANELWIDTH,PANELHEIGHT));\r\n        setBackground(Color.WHITE);\r\n        looper = new Timer(500, new ActionListener() {\r\n            int n = 0;\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                y++;\r\n                //repaint();\r\n            }\r\n        });\r\n        looper.start();\r\n    }\r\n\r\n    public void clear(){\r\n        for (int i = 0; i < NROWS; i++){\r\n            for(int j = 0; j < NCOLS; j++){\r\n                tiles[i][j] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public int checkLines(){\r\n        int completedLines = 0;\r\n        for(int row = 0; row < NROWS; row ++){\r\n            if(checkLine(row)){\r\n                completedLines++;\r\n            }\r\n        }\r\n        return completedLines;\r\n    }\r\n\r\n    private boolean checkLine(int line){\r\n        for(int col = 0; col < NCOLS; col++){\r\n            if(!isOccupied(col,line)) return false;\r\n        }\r\n        for(int row = line - 1; row >= 0; row--){\r\n            for(int col = 0; col < NCOLS; col ++){\r\n                setTile(col,row +1,getTile(col,row));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean isOccupied(int x, int y){\r\n        return tiles[y][x] != null;\r\n    }\r\n    \r\n    private void setTile(int x, int y, Tetrominoe type){\r\n        tiles[y][x] = type;\r\n    }\r\n    \r\n    private Tetrominoe getTile(int x, int y){\r\n        return tiles[y][x];\r\n    }\r\n//    @Override\r\n//    public void paintComponent(Graphics g) {\r\n//        super.paintComponent(g);\r\n//        g.translate(BORDERWIDTH, BORDERWIDTH);\r\n//        if (tetris.isPaused()) {\r\n//            loadCase1(g);\r\n//        }\r\n//        else if(tetris.isNewGame() || tetris.isGameOver()){\r\n//            loadCase2(g);\r\n//        }\r\n//        else{\r\n//            for(int x = 0; x < NCOLS; x++){\r\n//                for(int y = HIDDENROWCOUNT; y < NROWS; y++){\r\n//                    Tetrominoe tile = getTile(x,y);\r\n//                    if(tile != null){\r\n//                        drawTile(tile, x * TILESIZE, (y - HIDDENROWCOUNT) * TILESIZE,g);\r\n//                    }\r\n//                }\r\n//            }\r\n//            Tetrominoe type = tetris.getPieceType();\r\n//            int pieceCol = tetris.getPieceCol();\r\n//            int pieceRow = tetris.getPieceRow();\r\n//            int rotation = tetris.getPieceRotation();\r\n//\r\n//            for (int col = 0; col < type.getDimension(); col++){\r\n//                for (int row = 0; row < type.getDimension(); row ++){\r\n//                    if(pieceRow + row >= 2 && type.isTile(col,row,rotation)){\r\n//                        drawTile(type,(pieceCol+col)*TILESIZE,(pieceRow+row-HIDDENROWCOUNT)*TILESIZE,g);\r\n//                    }\r\n//                }\r\n//            }\r\n//            Color base = type.getBaseColor();\r\n//            base = new Color(base.getRed(), base.getGreen(), base.getBlue());\r\n//            for(int lowest = pieceRow; lowest < NROWS; lowest++){\r\n//                if(isValidAndEmpty(type,pieceCol,lowest,rotation)) continue;\r\n//                lowest--;\r\n//                for (int col = 0; col < type.getDimension(); col ++){\r\n//                    for(int row = 0; row < type.getDimension();row ++){\r\n//                        if(lowest + row >= 2 && type.isTile(col,row,rotation)){\r\n//                            drawTile(base,base.brighter(),base.darker(),(pieceCol + col)*TILESIZE,\r\n//                                    (lowest+row -HIDDENROWCOUNT)*TILESIZE,g);\r\n//                        }\r\n//                    }\r\n//                }\r\n//                break;\r\n//            }\r\n//\r\n//            g.setColor(Color.DARK_GRAY);\r\n//            for(int x = 0; x < NCOLS; x++){\r\n//                for(int y = 0; y < VISIBLEROWCOUNT; y++){\r\n//                    g.drawLine(0,y*TILESIZE,NCOLS*TILESIZE,y*TILESIZE);\r\n//                    g.drawLine(x*TILESIZE,0,x*TILESIZE,VISIBLEROWCOUNT*TILESIZE);\r\n//                }\r\n//            }\r\n//        }\r\n//        g.setColor(Color.BLACK);\r\n//        g.drawRect(0,0,TILESIZE*NCOLS,TILESIZE*VISIBLEROWCOUNT);\r\n//    }\r\n    @Override\r\n    public void paintComponent(Graphics g){\r\n        super.paintComponent(g);\r\n        drawShape(g);\r\n        drawBoard(g);\r\n\r\n\r\n    }\r\n    private void drawShape(Graphics g){\r\n        for(int row = 0; row < shape.length; row ++){\r\n            for(int col = 0; col < shape[0].length; col++) {\r\n                if (shape[row][col] != null) {\r\n                    g.setColor(shape[row][col]);\r\n                    g.fillRect((col * TILESIZE+x*TILESIZE) + MOVEMENT,\r\n                            (row * TILESIZE+y*TILESIZE) + MOVEMENT, TILESIZE, TILESIZE);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private void drawBoard(Graphics g){\r\n        g.setColor(Color.DARK_GRAY);\r\n        for(int col = 0; col < NCOLS; col++){\r\n            for(int row = 0; row < VISIBLEROWCOUNT; row++){\r\n                g.drawLine(MOVEMENT,row*TILESIZE+MOVEMENT,NCOLS*TILESIZE+MOVEMENT,row*TILESIZE+MOVEMENT);\r\n                g.drawLine(col*TILESIZE+MOVEMENT,MOVEMENT,col*TILESIZE+MOVEMENT,VISIBLEROWCOUNT*TILESIZE+MOVEMENT);\r\n            }\r\n        }\r\n        g.setColor(Color.BLACK);\r\n        g.drawRect(MOVEMENT,MOVEMENT,(TILESIZE*NCOLS),(TILESIZE*VISIBLEROWCOUNT));\r\n    }\r\n\r\n\r\n\r\n    private void drawTile(Color base, Color light, Color dark, int x, int y, Graphics g) {\r\n        g.setColor(base);\r\n        g.fillRect(x,y,TILESIZE,TILESIZE);\r\n\r\n        g.setColor(dark);\r\n        g.fillRect(x,y+TILESIZE-SHADEWIDTH,TILESIZE,SHADEWIDTH);\r\n        g.fillRect(x+TILESIZE-SHADEWIDTH,y,SHADEWIDTH,TILESIZE);\r\n\r\n        g.setColor(light);\r\n        for(int i= 0; i < SHADEWIDTH; i++){\r\n            g.drawLine(x,y+i,x+TILESIZE-i-1,y+i);\r\n            g.drawLine(x+i,y,x+i,y+TILESIZE-i-1);\r\n        }\r\n    }\r\n\r\n    private void loadCase1(Graphics g){\r\n        g.setFont(LARGEFONT);\r\n        g.setColor(Color.BLACK);\r\n        String msg = \"Paused\";\r\n        g.drawString(msg, CENTERX - g.getFontMetrics().stringWidth(msg) / 2, CENTERY);\r\n    }\r\n    private void loadCase2(Graphics g){\r\n        g.setFont(LARGEFONT);\r\n        g.setColor(Color.BLACK);\r\n        String msg = tetris.isNewGame() ? \"TETRIS\" : \"GAME OVER\";\r\n        g.drawString(msg, CENTERX - g.getFontMetrics().stringWidth(msg)/2,150);\r\n        g.setFont(SMALLFONT);\r\n        msg = \"Press Enter to play\" + (tetris.isNewGame() ? \"\": \" Again\");\r\n        g.drawString(msg,CENTERX -g.getFontMetrics().stringWidth(msg)/2,300);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Presentacion/Board.java b/src/Presentacion/Board.java
--- a/src/Presentacion/Board.java	(revision 36c6fc08615a57ae9b46352eed7f5c6bb7fad611)
+++ b/src/Presentacion/Board.java	(date 1637513984398)
@@ -1,6 +1,5 @@
 package Presentacion;
 
-import Dominio.Tetrominoe;
 
 import javax.swing.*;
 import java.awt.*;
@@ -26,7 +25,7 @@
     private static final Font LARGEFONT = new Font("Arial",Font.ITALIC,18);
     private static final Font SMALLFONT = new Font("Arial",Font.ITALIC,12);
     private Tetris1 tetris;
-    private Tetrominoe[][] tiles;
+    //private Tetrominoe[][] tiles;
     private Color[][] shape = {
             {Color.RED,Color.RED,Color.RED},
             {null,Color.RED,null}
@@ -50,47 +49,47 @@
         looper.start();
     }
 
-    public void clear(){
-        for (int i = 0; i < NROWS; i++){
-            for(int j = 0; j < NCOLS; j++){
-                tiles[i][j] = null;
-            }
-        }
-    }
-
-    public int checkLines(){
-        int completedLines = 0;
-        for(int row = 0; row < NROWS; row ++){
-            if(checkLine(row)){
-                completedLines++;
-            }
-        }
-        return completedLines;
-    }
+//    public void clear(){
+//        for (int i = 0; i < NROWS; i++){
+//            for(int j = 0; j < NCOLS; j++){
+//                tiles[i][j] = null;
+//            }
+//        }
+//    }
+//
+//    public int checkLines(){
+//        int completedLines = 0;
+//        for(int row = 0; row < NROWS; row ++){
+//            if(checkLine(row)){
+//                completedLines++;
+//            }
+//        }
+//        return completedLines;
+//    }
 
-    private boolean checkLine(int line){
-        for(int col = 0; col < NCOLS; col++){
-            if(!isOccupied(col,line)) return false;
-        }
-        for(int row = line - 1; row >= 0; row--){
-            for(int col = 0; col < NCOLS; col ++){
-                setTile(col,row +1,getTile(col,row));
-            }
-        }
-        return true;
-    }
+//    private boolean checkLine(int line){
+//        for(int col = 0; col < NCOLS; col++){
+//            if(!isOccupied(col,line)) return false;
+//        }
+//        for(int row = line - 1; row >= 0; row--){
+//            for(int col = 0; col < NCOLS; col ++){
+//                setTile(col,row +1,getTile(col,row));
+//            }
+//        }
+//        return true;
+//    }
 
-    private boolean isOccupied(int x, int y){
-        return tiles[y][x] != null;
-    }
-    
-    private void setTile(int x, int y, Tetrominoe type){
-        tiles[y][x] = type;
-    }
-    
-    private Tetrominoe getTile(int x, int y){
-        return tiles[y][x];
-    }
+//    private boolean isOccupied(int x, int y){
+//        return tiles[y][x] != null;
+//    }
+//
+//    private void setTile(int x, int y, Tetrominoe type){
+//        tiles[y][x] = type;
+//    }
+//
+//    private Tetrominoe getTile(int x, int y){
+//        return tiles[y][x];
+//    }
 //    @Override
 //    public void paintComponent(Graphics g) {
 //        super.paintComponent(g);
Index: src/Presentacion/NewFigurePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Presentacion;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Dimension;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics;\r\n\r\nimport javax.swing.*;\r\n\r\n\r\npublic class NewFigurePanel extends JPanel {\r\n\r\n    private static final int TILESIZE = Board.TILESIZE / 2;\r\n    private static final int SHADEWIDTH = Board.SHADEWIDTH >> 1;\r\n    private static final int TILECOUNT = 5;\r\n    private static final int SQUARECENTER_X = 130;\r\n    private static final int SQUARECENTER_Y = 65;\r\n    private static final int SQUARESIZE = (TILESIZE * TILECOUNT >> 1);\r\n    private static final int SMALL_INSET = 20;\r\n    private static final int LARGE_INSET = 40;\r\n    private static final int STATS_INSET = 175;\r\n    private static final int CONTROLS_INSET = 300;\r\n    private static final int TEXT_STRIDE = 25;\r\n    private static final Font SMALL_FONT = new Font(\"Arial\", Font.BOLD, 11);\r\n    private static final Font LARGE_FONT = new Font(\"Arial Bold\", Font.BOLD, 13);\r\n    private static final Color DRAW_COLOR = Color.BLACK;\r\n    private String nickname;\r\n    //Agregar atributos aca:\r\n    private JButton save;\r\n    private JButton color;\r\n    private JButton controls;\r\n    private JButton help;\r\n\r\n\r\n    //Fin nuevos atributos\r\n\r\n    private Tetris1 tetris;\r\n\r\n    public NewFigurePanel(Tetris1 tetris) {\r\n        this.tetris = tetris;\r\n        nickname = tetris.getNickname();\r\n        setPreferredSize(new Dimension(Board.PANELWIDTH, Board.PANELHEIGHT));\r\n        setBackground(Color.WHITE);\r\n        setLayout(null);\r\n        prepareElementosM1();\r\n    }\r\n    //Metodos nuevos aca:\r\n    private void prepareElementosM1() {\r\n        save = new JButton(\"Save\");\r\n        save.setBounds(30,200,90, 20);\r\n        controls = new JButton(\"Controls\");\r\n        controls.setBounds(130,200,90, 20);\r\n        color = new JButton(\"Color\");\r\n        color.setBounds(30,240,90, 20);\r\n//        help = new JButton(\"Help\");\r\n        add(save);\r\n        add(controls);\r\n        add(color);\r\n    }\r\n\r\n    //Fin metodos nuevos\r\n    @Override\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(DRAW_COLOR);\r\n        int offset;\r\n\r\n        //Section stats\r\n        g.setFont(LARGE_FONT);\r\n        g.drawString(\"Options\", SMALL_INSET, offset = STATS_INSET);\r\n        g.setFont(SMALL_FONT);\r\n        //g.drawString(\"Nickname: \" + tetris.getLevel(), LARGE_INSET, offset += TEXT_STRIDE);\r\n        //g.drawString(\"Score: \" + tetris.getScore(), LARGE_INSET, offset += TEXT_STRIDE);\r\n\r\n        //Section controls\r\n//        g.setFont(LARGE_FONT);\r\n//        g.drawString(\"Controls Player one\", SMALL_INSET, offset = CONTROLS_INSET);\r\n//        g.setFont(SMALL_FONT);\r\n//        g.drawString(\"A - Move Left\", LARGE_INSET, offset += TEXT_STRIDE);\r\n//        g.drawString(\"D - Move Right\", LARGE_INSET, offset += TEXT_STRIDE);\r\n//        g.drawString(\"W - Rotate\", LARGE_INSET, offset += TEXT_STRIDE);\r\n//        g.drawString(\". - Use a Buffo\", LARGE_INSET, offset += TEXT_STRIDE);\r\n//        g.drawString(\"S - Drop\", LARGE_INSET, offset += TEXT_STRIDE);\r\n//        g.drawString(\"P - Pause Game\", LARGE_INSET, offset += TEXT_STRIDE);\r\n\r\n        //Section next piece\r\n        g.setFont(LARGE_FONT);\r\n        g.drawString(\"Next Piece:\", SMALL_INSET, 70);\r\n        g.drawRect(SQUARECENTER_X - SQUARESIZE, SQUARECENTER_Y - SQUARESIZE, SQUARESIZE * 2, SQUARESIZE * 2);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Presentacion/NewFigurePanel.java b/src/Presentacion/NewFigurePanel.java
--- a/src/Presentacion/NewFigurePanel.java	(revision 36c6fc08615a57ae9b46352eed7f5c6bb7fad611)
+++ b/src/Presentacion/NewFigurePanel.java	(date 1637514207171)
@@ -30,6 +30,7 @@
     private JButton color;
     private JButton controls;
     private JButton help;
+    private JLabel options;
 
 
     //Fin nuevos atributos
@@ -52,7 +53,7 @@
         controls.setBounds(130,200,90, 20);
         color = new JButton("Color");
         color.setBounds(30,240,90, 20);
-//        help = new JButton("Help");
+//        help = new JButton("Help")
         add(save);
         add(controls);
         add(color);
@@ -67,15 +68,16 @@
 
         //Section stats
         g.setFont(LARGE_FONT);
-        g.drawString("Options", SMALL_INSET, offset = STATS_INSET);
+        g.drawString("Options:", SMALL_INSET, offset = STATS_INSET);
         g.setFont(SMALL_FONT);
-        //g.drawString("Nickname: " + tetris.getLevel(), LARGE_INSET, offset += TEXT_STRIDE);
+        //g.drawString("Nickname: " + tetris.getNickname(), LARGE_INSET, offset += TEXT_STRIDE);
         //g.drawString("Score: " + tetris.getScore(), LARGE_INSET, offset += TEXT_STRIDE);
 
         //Section controls
-//        g.setFont(LARGE_FONT);
-//        g.drawString("Controls Player one", SMALL_INSET, offset = CONTROLS_INSET);
-//        g.setFont(SMALL_FONT);
+        g.setFont(LARGE_FONT);
+        g.drawString("Stats", SMALL_INSET, offset = CONTROLS_INSET);
+        g.setFont(SMALL_FONT);
+        g.drawString("Nickname: " + tetris.getNickname(), LARGE_INSET, offset += TEXT_STRIDE);
 //        g.drawString("A - Move Left", LARGE_INSET, offset += TEXT_STRIDE);
 //        g.drawString("D - Move Right", LARGE_INSET, offset += TEXT_STRIDE);
 //        g.drawString("W - Rotate", LARGE_INSET, offset += TEXT_STRIDE);
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" default=\"true\" project-jdk-name=\"openjdk-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 36c6fc08615a57ae9b46352eed7f5c6bb7fad611)
+++ b/.idea/misc.xml	(date 1637513726992)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="openjdk-17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="openjdk-17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b2d7d353-4d5c-4575-b84c-54a645cdaf76\" name=\"Default Changelist\" comment=\"s8i\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Dominio/Tetrominoe.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Dominio/Tetrominoe.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Dominio/Tile.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/NewFigurePanel.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/NewFigurePanel.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/Tetris1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/Tetris1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/TetrisMain.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/TetrisMain.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Dominio/Tetrominoe.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Dominio/Tetrominoe.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Presentacion/NewFigurePanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Presentacion/NewFigurePanel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Presentacion/Tetris1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Presentacion/Tetris1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Presentacion/TetrisMain.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Presentacion/TetrisMain.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"219ng7fLrLYiOThqrYRwlje8R7Z\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.TetrisMain\">\r\n    <configuration name=\"TetrisMain\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Presentacion.TetrisMain\" />\r\n      <module name=\"ProyectoFinal\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"Presentacion.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"main1\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Presentacion.Tetris1\" />\r\n      <module name=\"ProyectoFinal\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b2d7d353-4d5c-4575-b84c-54a645cdaf76\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1637362279305</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1637362279305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"1\">\r\n      <created>1637378982334</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637378982334</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"1\">\r\n      <created>1637379033699</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637379033699</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"1\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"1\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/ProyectoFinal$TetrisGUI.ic\" NAME=\"TetrisGUI Coverage Results\" MODIFIED=\"1636317703885\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n    <SUITE FILE_PATH=\"coverage/ProyectoFinal$Tetris.ic\" NAME=\"Tetris Coverage Results\" MODIFIED=\"1636420029275\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>Presentacion.*</FILTER>\r\n    </SUITE>\r\n    <SUITE FILE_PATH=\"coverage/ProyectoFinal$Test2.ic\" NAME=\"Test2 Coverage Results\" MODIFIED=\"1636310506778\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>Presentacion.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 36c6fc08615a57ae9b46352eed7f5c6bb7fad611)
+++ b/.idea/workspace.xml	(date 1637514290594)
@@ -7,12 +7,12 @@
     <list default="true" id="b2d7d353-4d5c-4575-b84c-54a645cdaf76" name="Default Changelist" comment="s8i">
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/ProyectoFinal/Dominio/Tetrominoe.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoFinal/Dominio/Tetrominoe.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/ProyectoFinal/Dominio/Tile.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoFinal/Dominio/Tetrominoe.class" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/NewFigurePanel.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/NewFigurePanel.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/Tetris1.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/Tetris1.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/TetrisMain.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/TetrisMain.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Dominio/Tetrominoe.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Dominio/Tetrominoe.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Presentacion/Board.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Presentacion/Board.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Presentacion/NewFigurePanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Presentacion/NewFigurePanel.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Presentacion/Tetris1.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Presentacion/Tetris1.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Presentacion/TetrisMain.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Presentacion/TetrisMain.java" afterDir="false" />
@@ -41,9 +41,6 @@
     </file-type-list>
   </component>
   <component name="ProjectId" id="219ng7fLrLYiOThqrYRwlje8R7Z" />
-  <component name="ProjectLevelVcsManager">
-    <ConfirmationsSetting value="2" id="Add" />
-  </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
@@ -52,6 +49,7 @@
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
+    <property name="settings.editor.selected.configurable" value="preferences.lookFeel" />
   </component>
   <component name="RunManager" selected="Application.TetrisMain">
     <configuration name="TetrisMain" type="Application" factoryName="Application" nameIsGenerated="true">
@@ -98,7 +96,14 @@
       <option name="project" value="LOCAL" />
       <updated>1637379033699</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="s8i">
+      <created>1637509451873</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1637509451873</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -115,15 +120,16 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="1" />
-    <option name="LAST_COMMIT_MESSAGE" value="1" />
+    <MESSAGE value="s8i" />
+    <option name="LAST_COMMIT_MESSAGE" value="s8i" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/ProyectoFinal$TetrisGUI.ic" NAME="TetrisGUI Coverage Results" MODIFIED="1636317703885" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
     <SUITE FILE_PATH="coverage/ProyectoFinal$Tetris.ic" NAME="Tetris Coverage Results" MODIFIED="1636420029275" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>Presentacion.*</FILTER>
     </SUITE>
     <SUITE FILE_PATH="coverage/ProyectoFinal$Test2.ic" NAME="Test2 Coverage Results" MODIFIED="1636310506778" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>Presentacion.*</FILTER>
     </SUITE>
+    <SUITE FILE_PATH="coverage/ProyectoFinal$TetrisGUI.ic" NAME="TetrisGUI Coverage Results" MODIFIED="1636317703885" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
   </component>
 </project>
\ No newline at end of file
