Index: src/Ayudas/Tetris.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Ayudas;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.event.KeyAdapter;\r\nimport java.awt.event.KeyEvent;\r\nimport java.util.Random;\r\n\r\nimport javax.swing.JFrame;\r\n\r\n/**\r\n * The {@code Tetris} class is responsible for handling much of the game logic and\r\n * reading user input.\r\n * @author Brendan Jones\r\n *\r\n */\r\npublic class Tetris extends JFrame {\r\n\t\r\n\t/**\r\n\t * The Serial Version UID.\r\n\t */\r\n\t/**\r\n\t * The number of milliseconds per frame.\r\n\t */\r\n\tprivate static final long FRAME_TIME = 1000L / 50L;\r\n\t\r\n\t/**\r\n\t * The number of pieces that exist.\r\n\t */\r\n\tprivate static final int TYPE_COUNT = TileType.values().length;\r\n\t\t\r\n\t/**\r\n\t * The BoardPanel instance.\r\n\t */\r\n\tprivate BoardPanel board;\r\n\t\r\n\t/**\r\n\t * The SidePanel instance.\r\n\t */\r\n\tprivate SidePanel side;\r\n\t\r\n\t/**\r\n\t * Whether or not the game is paused.\r\n\t */\r\n\tprivate boolean isPaused;\r\n\t\r\n\t/**\r\n\t * Whether or not we've played a game yet. This is set to true\r\n\t * initially and then set to false when the game starts.\r\n\t */\r\n\tprivate boolean isNewGame;\r\n\t\r\n\t/**\r\n\t * Whether or not the game is over.\r\n\t */\r\n\tprivate boolean isGameOver;\r\n\t\r\n\t/**\r\n\t * The current level we're on.\r\n\t */\r\n\tprivate int level;\r\n\t\r\n\t/**\r\n\t * The current score.\r\n\t */\r\n\tprivate int score;\r\n\t\r\n\t/**\r\n\t * The random number generator. This is used to\r\n\t * spit out pieces randomly.\r\n\t */\r\n\tprivate Random random;\r\n\t\r\n\t/**\r\n\t * The clock that handles the update logic.\r\n\t */\r\n\tprivate Clock logicTimer;\r\n\t\t\t\t\r\n\t/**\r\n\t * The current type of tile.\r\n\t */\r\n\tprivate TileType currentType;\r\n\t\r\n\t/**\r\n\t * The next type of tile.\r\n\t */\r\n\tprivate TileType nextType;\r\n\t\t\r\n\t/**\r\n\t * The current column of our tile.\r\n\t */\r\n\tprivate int currentCol;\r\n\t\r\n\t/**\r\n\t * The current row of our tile.\r\n\t */\r\n\tprivate int currentRow;\r\n\t\r\n\t/**\r\n\t * The current rotation of our tile.\r\n\t */\r\n\tprivate int currentRotation;\r\n\t\t\r\n\t/**\r\n\t * Ensures that a certain amount of time passes after a piece is\r\n\t * spawned before we can drop it.\r\n\t */\r\n\tprivate int dropCooldown;\r\n\t\r\n\t/**\r\n\t * The speed of the game.\r\n\t */\r\n\tprivate float gameSpeed;\r\n\t\t\r\n\t/**\r\n\t * Creates a new Tetris instance. Sets up the window's properties,\r\n\t * and adds a controller listener.\r\n\t */\r\n\tprivate Tetris() {\r\n\t\t/*\r\n\t\t * Set the basic properties of the window.\r\n\t\t */\r\n\t\tsuper(\"Tetris\");\r\n\t\tsetLayout(new BorderLayout());\r\n\t\tsetDefaultCloseOperation(EXIT_ON_CLOSE);\r\n\t\tsetResizable(false);\r\n\t\t\r\n\t\t/*\r\n\t\t * Initialize the BoardPanel and SidePanel instances.\r\n\t\t */\r\n\t\tthis.board = new BoardPanel(this);\r\n\t\tthis.side = new SidePanel(this);\r\n\t\t\r\n\t\t/*\r\n\t\t * Add the BoardPanel and SidePanel instances to the window.\r\n\t\t */\r\n\t\tadd(board, BorderLayout.CENTER);\r\n\t\tadd(side, BorderLayout.EAST);\r\n\t\t\r\n\t\t/*\r\n\t\t * Adds a custom anonymous KeyListener to the frame.\r\n\t\t */\r\n\t\taddKeyListener(new KeyAdapter() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tswitch(e.getKeyCode()) {\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Drop - When pressed, we check to see that the game is not\r\n\t\t\t\t * paused and that there is no drop cooldown, then set the\r\n\t\t\t\t * logic timer to run at a speed of 25 cycles per second.\r\n\t\t\t\t */\r\n\t\t\t\tcase KeyEvent.VK_S:\r\n\t\t\t\t\tif(!isPaused && dropCooldown == 0) {\r\n\t\t\t\t\t\tlogicTimer.setCyclesPerSecond(25.0f);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Move Left - When pressed, we check to see that the game is\r\n\t\t\t\t * not paused and that the position to the left of the current\r\n\t\t\t\t * position is valid. If so, we decrement the current column by 1.\r\n\t\t\t\t */\r\n\t\t\t\tcase KeyEvent.VK_A:\r\n\t\t\t\t\tif(!isPaused && board.isValidAndEmpty(currentType, currentCol - 1, currentRow, currentRotation)) {\r\n\t\t\t\t\t\tcurrentCol--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Move Right - When pressed, we check to see that the game is\r\n\t\t\t\t * not paused and that the position to the right of the current\r\n\t\t\t\t * position is valid. If so, we increment the current column by 1.\r\n\t\t\t\t */\r\n\t\t\t\tcase KeyEvent.VK_D:\r\n\t\t\t\t\tif(!isPaused && board.isValidAndEmpty(currentType, currentCol + 1, currentRow, currentRotation)) {\r\n\t\t\t\t\t\tcurrentCol++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Rotate Anticlockwise - When pressed, check to see that the game is not paused\r\n\t\t\t\t * and then attempt to rotate the piece anticlockwise. Because of the size and\r\n\t\t\t\t * complexity of the rotation code, as well as it's similarity to clockwise\r\n\t\t\t\t * rotation, the code for rotating the piece is handled in another method.\r\n\t\t\t\t */\r\n\t\t\t\tcase KeyEvent.VK_Q:\r\n\t\t\t\t\tif(!isPaused) {\r\n\t\t\t\t\t\trotatePiece((currentRotation == 0) ? 3 : currentRotation - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t     * Rotate Clockwise - When pressed, check to see that the game is not paused\r\n\t\t\t\t * and then attempt to rotate the piece clockwise. Because of the size and\r\n\t\t\t\t * complexity of the rotation code, as well as it's similarity to anticlockwise\r\n\t\t\t\t * rotation, the code for rotating the piece is handled in another method.\r\n\t\t\t\t */\r\n\t\t\t\tcase KeyEvent.VK_E:\r\n\t\t\t\t\tif(!isPaused) {\r\n\t\t\t\t\t\trotatePiece((currentRotation == 3) ? 0 : currentRotation + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Pause Game - When pressed, check to see that we're currently playing a game.\r\n\t\t\t\t * If so, toggle the pause variable and update the logic timer to reflect this\r\n\t\t\t\t * change, otherwise the game will execute a huge number of updates and essentially\r\n\t\t\t\t * cause an instant game over when we unpause if we stay paused for more than a\r\n\t\t\t\t * minute or so.\r\n\t\t\t\t */\r\n\t\t\t\tcase KeyEvent.VK_P:\r\n\t\t\t\t\tif(!isGameOver && !isNewGame) {\r\n\t\t\t\t\t\tisPaused = !isPaused;\r\n\t\t\t\t\t\tlogicTimer.setPaused(isPaused);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Start Game - When pressed, check to see that we're in either a game over or new\r\n\t\t\t\t * game state. If so, reset the game.\r\n\t\t\t\t */\r\n\t\t\t\tcase KeyEvent.VK_ENTER:\r\n\t\t\t\t\tif(isGameOver || isNewGame) {\r\n\t\t\t\t\t\tresetGame();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t\t\r\n\t\t\t\tswitch(e.getKeyCode()) {\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Drop - When released, we set the speed of the logic timer\r\n\t\t\t\t * back to whatever the current game speed is and clear out\r\n\t\t\t\t * any cycles that might still be elapsed.\r\n\t\t\t\t */\r\n\t\t\t\tcase KeyEvent.VK_S:\r\n\t\t\t\t\tlogicTimer.setCyclesPerSecond(gameSpeed);\r\n\t\t\t\t\tlogicTimer.reset();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t/*\r\n\t\t * Here we resize the frame to hold the BoardPanel and SidePanel instances,\r\n\t\t * center the window on the screen, and show it to the user.\r\n\t\t */\r\n\t\tpack();\r\n\t\tsetLocationRelativeTo(null);\r\n\t\tsetVisible(true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Starts the game running. Initializes everything and enters the game loop.\r\n\t */\r\n\tprivate void startGame() {\r\n\t\t/*\r\n\t\t * Initialize our random number generator, logic timer, and new game variables.\r\n\t\t */\r\n\t\tthis.random = new Random();\r\n\t\tthis.isNewGame = true;\r\n\t\tthis.gameSpeed = 1.0f;\r\n\r\n\t\t\r\n\t\t/*\r\n\t\t * Setup the timer to keep the game from running before the user presses enter\r\n\t\t * to start it.\r\n\t\t */\r\n\t\tthis.logicTimer = new Clock(gameSpeed);\r\n\t\tlogicTimer.setPaused(true);\r\n\t\t\r\n\t\twhile(true) {\r\n\t\t\t//Get the time that the frame started.\r\n\t\t\tlong start = System.nanoTime();\r\n\t\t\t\r\n\t\t\t//Update the logic timer.\r\n\t\t\tlogicTimer.update();\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * If a cycle has elapsed on the timer, we can update the game and\r\n\t\t\t * move our current piece down.\r\n\t\t\t */\r\n\t\t\tif(logicTimer.hasElapsedCycle()) {\r\n\t\t\t\tupdateGame();\r\n\t\t\t}\r\n\t\t\r\n\t\t\t//Decrement the drop cool down if necessary.\r\n\t\t\tif(dropCooldown > 0) {\r\n\t\t\t\tdropCooldown--;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Display the window to the user.\r\n\t\t\trenderGame();\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Sleep to cap the framerate.\r\n\t\t\t */\r\n\t\t\tlong delta = (System.nanoTime() - start) / 1000000L;\r\n\t\t\tif(delta < FRAME_TIME) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tThread.sleep(FRAME_TIME - delta);\r\n\t\t\t\t} catch(Exception e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates the game and handles the bulk of it's logic.\r\n\t */\r\n\tprivate void updateGame() {\r\n\t\t/*\r\n\t\t * Check to see if the piece's position can move down to the next row.\r\n\t\t */\r\n\t\tif(board.isValidAndEmpty(currentType, currentCol, currentRow + 1, currentRotation)) {\r\n\t\t\t//Increment the current row if it's safe to do so.\r\n\t\t\tcurrentRow++;\r\n\t\t} else {\r\n\t\t\t/*\r\n\t\t\t * We've either reached the bottom of the board, or landed on another piece, so\r\n\t\t\t * we need to add the piece to the board.\r\n\t\t\t */\r\n\t\t\tboard.addPiece(currentType, currentCol, currentRow, currentRotation);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Check to see if adding the new piece resulted in any cleared lines. If so,\r\n\t\t\t * increase the player's score. (Up to 4 lines can be cleared in a single go;\r\n\t\t\t * [1 = 100pts, 2 = 200pts, 3 = 400pts, 4 = 800pts]).\r\n\t\t\t */\r\n\t\t\tint cleared = board.checkLines();\r\n\t\t\tif(cleared > 0) {\r\n\t\t\t\tscore += 50 << cleared;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Increase the speed slightly for the next piece and update the game's timer\r\n\t\t\t * to reflect the increase.\r\n\t\t\t */\r\n\t\t\tgameSpeed += 0.035f;\r\n\t\t\tlogicTimer.setCyclesPerSecond(gameSpeed);\r\n\t\t\tlogicTimer.reset();\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Set the drop cooldown so the next piece doesn't automatically come flying\r\n\t\t\t * in from the heavens immediately after this piece hits if we've not reacted\r\n\t\t\t * yet. (~0.5 second buffer).\r\n\t\t\t */\r\n\t\t\tdropCooldown = 25;\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Update the difficulty level. This has no effect on the game, and is only\r\n\t\t\t * used in the \"Level\" string in the SidePanel.\r\n\t\t\t */\r\n\t\t\tlevel = (int)(gameSpeed * 1.70f);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Spawn a new piece to control.\r\n\t\t\t */\r\n\t\t\tspawnPiece();\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Forces the BoardPanel and SidePanel to repaint.\r\n\t */\r\n\tprivate void renderGame() {\r\n\t\tboard.repaint();\r\n\t\tside.repaint();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Resets the game variables to their default values at the start\r\n\t * of a new game.\r\n\t */\r\n\tprivate void resetGame() {\r\n\t\tthis.level = 1;\r\n\t\tthis.score = 0;\r\n\t\tthis.gameSpeed = 1.0f;\r\n\t\tthis.nextType = TileType.values()[random.nextInt(TYPE_COUNT)];\r\n\t\tthis.isNewGame = false;\r\n\t\tthis.isGameOver = false;\t\t\r\n\t\tboard.clear();\r\n\t\tlogicTimer.reset();\r\n\t\tlogicTimer.setCyclesPerSecond(gameSpeed);\r\n\t\tspawnPiece();\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Spawns a new piece and resets our piece's variables to their default\r\n\t * values.\r\n\t */\r\n\tprivate void spawnPiece() {\r\n\t\t/*\r\n\t\t * Poll the last piece and reset our position and rotation to\r\n\t\t * their default variables, then pick the next piece to use.\r\n\t\t */\r\n\t\tthis.currentType = nextType;\r\n\t\tthis.currentCol = currentType.getSpawnColumn();\r\n\t\tthis.currentRow = currentType.getSpawnRow();\r\n\t\tthis.currentRotation = 0;\r\n\t\tthis.nextType = TileType.values()[random.nextInt(TYPE_COUNT)];\r\n\t\t\r\n\t\t/*\r\n\t\t * If the spawn point is invalid, we need to pause the game and flag that we've lost\r\n\t\t * because it means that the pieces on the board have gotten too high.\r\n\t\t */\r\n\t\tif(!board.isValidAndEmpty(currentType, currentCol, currentRow, currentRotation)) {\r\n\t\t\tthis.isGameOver = true;\r\n\t\t\tlogicTimer.setPaused(true);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to set the rotation of the current piece to newRotation.\r\n\t * @param newRotation The rotation of the new peice.\r\n\t */\r\n\tprivate void rotatePiece(int newRotation) {\r\n\t\t/*\r\n\t\t * Sometimes pieces will need to be moved when rotated to avoid clipping\r\n\t\t * out of the board (the I piece is a good example of this). Here we store\r\n\t\t * a temporary row and column in case we need to move the tile as well.\r\n\t\t */\r\n\t\tint newColumn = currentCol;\r\n\t\tint newRow = currentRow;\r\n\t\t\r\n\t\t/*\r\n\t\t * Get the insets for each of the sides. These are used to determine how\r\n\t\t * many empty rows or columns there are on a given side.\r\n\t\t */\r\n\t\tint left = currentType.getLeftInset(newRotation);\r\n\t\tint right = currentType.getRightInset(newRotation);\r\n\t\tint top = currentType.getTopInset(newRotation);\r\n\t\tint bottom = currentType.getBottomInset(newRotation);\r\n\t\t\r\n\t\t/*\r\n\t\t * If the current piece is too far to the left or right, move the piece away from the edges\r\n\t\t * so that the piece doesn't clip out of the map and automatically become invalid.\r\n\t\t */\r\n\t\tif(currentCol < -left) {\r\n\t\t\tnewColumn -= currentCol - left;\r\n\t\t} else if(currentCol + currentType.getDimension() - right >= BoardPanel.COL_COUNT) {\r\n\t\t\tnewColumn -= (currentCol + currentType.getDimension() - right) - BoardPanel.COL_COUNT + 1;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * If the current piece is too far to the top or bottom, move the piece away from the edges\r\n\t\t * so that the piece doesn't clip out of the map and automatically become invalid.\r\n\t\t */\r\n\t\tif(currentRow < -top) {\r\n\t\t\tnewRow -= currentRow - top;\r\n\t\t} else if(currentRow + currentType.getDimension() - bottom >= BoardPanel.ROW_COUNT) {\r\n\t\t\tnewRow -= (currentRow + currentType.getDimension() - bottom) - BoardPanel.ROW_COUNT + 1;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Check to see if the new position is acceptable. If it is, update the rotation and\r\n\t\t * position of the piece.\r\n\t\t */\r\n\t\tif(board.isValidAndEmpty(currentType, newColumn, newRow, newRotation)) {\r\n\t\t\tcurrentRotation = newRotation;\r\n\t\t\tcurrentRow = newRow;\r\n\t\t\tcurrentCol = newColumn;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks to see whether or not the game is paused.\r\n\t * @return Whether or not the game is paused.\r\n\t */\r\n\tpublic boolean isPaused() {\r\n\t\treturn isPaused;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks to see whether or not the game is over.\r\n\t * @return Whether or not the game is over.\r\n\t */\r\n\tpublic boolean isGameOver() {\r\n\t\treturn isGameOver;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks to see whether or not we're on a new game.\r\n\t * @return Whether or not this is a new game.\r\n\t */\r\n\tpublic boolean isNewGame() {\r\n\t\treturn isNewGame;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the current score.\r\n\t * @return The score.\r\n\t */\r\n\tpublic int getScore() {\r\n\t\treturn score;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the current level.\r\n\t * @return The level.\r\n\t */\r\n\tpublic int getLevel() {\r\n\t\treturn level;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the current type of piece we're using.\r\n\t * @return The piece type.\r\n\t */\r\n\tpublic TileType getPieceType() {\r\n\t\treturn currentType;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the next type of piece we're using.\r\n\t * @return The next piece.\r\n\t */\r\n\tpublic TileType getNextPieceType() {\r\n\t\treturn nextType;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the column of the current piece.\r\n\t * @return The column.\r\n\t */\r\n\tpublic int getPieceCol() {\r\n\t\treturn currentCol;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the row of the current piece.\r\n\t * @return The row.\r\n\t */\r\n\tpublic int getPieceRow() {\r\n\t\treturn currentRow;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the rotation of the current piece.\r\n\t * @return The rotation.\r\n\t */\r\n\tpublic int getPieceRotation() {\r\n\t\treturn currentRotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Entry-point of the game. Responsible for creating and starting a new\r\n\t * game instance.\r\n\t * @param args Unused.\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\tTetris tetris = new Tetris();\r\n\t\ttetris.startGame();\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ayudas/Tetris.java b/src/Ayudas/Tetris.java
--- a/src/Ayudas/Tetris.java	(revision b7ea6eefad8afb8172a0d513995970f73843bc2a)
+++ b/src/Ayudas/Tetris.java	(date 1637718804384)
@@ -4,7 +4,6 @@
 import java.awt.event.KeyAdapter;
 import java.awt.event.KeyEvent;
 import java.util.Random;
-
 import javax.swing.JFrame;
 
 /**
Index: src/Presentacion/Tetris1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Presentacion;\r\n\r\n//import Dominio.Tetrominoe;\r\n\r\nimport Ayudas.BoardPanel;\r\nimport Ayudas.TileType;\r\nimport Dominio.*;\r\n\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.border.CompoundBorder;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.border.TitledBorder;\r\nimport java.awt.*;\r\n\r\nimport java.awt.event.KeyAdapter;\r\nimport java.awt.event.KeyEvent;\r\nimport java.util.Random;\r\n\r\npublic class Tetris1 extends JFrame {\r\n    //Padre\r\n    TetrisMain main;\r\n    //Panel NewFigure\r\n    NewFigurePanel newFigure;\r\n    //Panel Board\r\n    Board board;\r\n    //Tamano ventana\r\n    private final int ANCHO = 566;\r\n    private final int ALTO = 568;\r\n    //Atributos motor juego\r\n    //Estados juego\r\n    private boolean isPaused;\r\n    private boolean isNewGame;\r\n    private boolean isGameOver;\r\n    //Stats del juego\r\n    private int level;\r\n    private int score;\r\n    //Reloj del juego\r\n    private static final long FRAME_TIME = 1000L / 50L;\r\n    private Clock logicTimer;\r\n\r\n    //Fichas juego\r\n    private Tetrominoe nextPiece;\r\n    private Tetrominoe currPiece;\r\n    private Random random;\r\n    private static final int TYPE_COUNT = TileType.values().length;\r\n\r\n    //Fila, columna y rotacion de la pieza\r\n    private int currRow;\r\n    private int currCol;\r\n    private int currRotation;\r\n\r\n    //otros\r\n    private int dropCooldown;\r\n    private float gameSpeed;\r\n\r\n\r\n    public Tetris1(TetrisMain main, String title) {\r\n        super(title);\r\n        this.main = main;\r\n        //System.out.println(ANCHO);\r\n        //System.out.println(ALTO);\r\n        prepareElementos();\r\n        //startGame();\r\n    }\r\n\r\n\r\n//    public static void main(String[] args){\r\n//        Tetris1 gui = new Tetris1(\"Tetris Game\");\r\n//        gui.setVisible(true);\r\n//    }\r\n\r\n    public void prepareElementos(){\r\n        setPreferredSize(new Dimension(ANCHO,ALTO));\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        setResizable(false);\r\n        setLayout(new BorderLayout());\r\n        cargueElementos();\r\n        configureElementos();\r\n        agregueElementos();\r\n        prepareAcciones();\r\n        pack();\r\n        setLocationRelativeTo(null);\r\n        setVisible(true);\r\n    }\r\n    private void cargueElementos(){\r\n        newFigure = new NewFigurePanel(this);\r\n        board = new Board(this);\r\n    }\r\n    private void configureElementos(){\r\n        board.setBorder(new CompoundBorder(new EmptyBorder(5, 5, 5, 5),\r\n                new TitledBorder(\"Board\")));\r\n        newFigure.setBorder(new CompoundBorder(new EmptyBorder(5,5,5,5),\r\n                new TitledBorder(\"Game Info\")));\r\n        Color color = JColorChooser.showDialog(null, \"Choose a color\", Color.BLACK);\r\n        newFigure.setBackground(color);\r\n        board.setBackground(color);\r\n    }\r\n    private void agregueElementos(){\r\n        add(board,BorderLayout.CENTER);\r\n        add(newFigure,BorderLayout.WEST);\r\n    }\r\n    private void prepareAcciones() {\r\n        addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                switch (e.getKeyCode()){\r\n                    case KeyEvent.VK_S:\r\n                        if(!isPaused && dropCooldown == 0){\r\n                            logicTimer.setCyclesPerSecond(25.0f);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_A:\r\n                        if(!isPaused && board.isValidAndEmpty(currPiece,currCol-1,currRow,currRotation)){\r\n                            currCol--;\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_D:\r\n                        if(!isPaused && board.isValidAndEmpty(currPiece,currCol-1,currRow,currRotation)){\r\n                            currCol++;\r\n                        }\r\n                    case KeyEvent.VK_Q:\r\n                        if(!isPaused){\r\n                            rotatePiece((currRotation == 0) ? 3 :currRotation-1);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_P:\r\n                        if(!isGameOver && !isNewGame){\r\n                            isPaused = !isPaused;\r\n                            logicTimer.setPaused(isPaused);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_ENTER:\r\n                        if(isGameOver || isNewGame){\r\n                            resetGame();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            @Override\r\n            public void keyReleased(KeyEvent e) {\r\n                switch (e.getKeyCode()) {\r\n                    case KeyEvent.VK_S:\r\n                        logicTimer.setCyclesPerSecond(gameSpeed);\r\n                        logicTimer.reset();\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void actionsFromKeyBoard(KeyEvent e){\r\n\r\n    }\r\n\r\n    public Tetrominoe getNextPieceType() {\r\n        return nextPiece;\r\n    }\r\n\r\n    public void startGame(){\r\n        isNewGame = true;\r\n        gameSpeed = 1.0f;\r\n        random = new Random();\r\n        logicTimer = new Clock(gameSpeed);\r\n        logicTimer.setPaused(true);\r\n\r\n        while (true){\r\n            long start = System.nanoTime();\r\n\r\n            logicTimer.update();\r\n            if(logicTimer.hasElapsedCycle()){\r\n                updateGame();\r\n            }\r\n\r\n            if(dropCooldown > 0){\r\n                dropCooldown--;\r\n            }\r\n            renderGame();\r\n            long delta = (System.nanoTime() - start) / 1000000L;\r\n            if(delta < FRAME_TIME) {\r\n                try {\r\n                    Thread.sleep(FRAME_TIME - delta);\r\n                } catch(Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private void updateGame(){\r\n        if(board.isValidAndEmpty(currPiece,currCol,currRow+1,currRotation)){\r\n            currRow++;\r\n        }\r\n        else{\r\n            board.addPiece(currPiece,currCol,currRow,currRotation);\r\n            int cleared = board.checkLines();\r\n            if(cleared > 0) {\r\n                score += 50 << cleared;\r\n            }\r\n            gameSpeed += 0.035f;\r\n            logicTimer.setCyclesPerSecond(gameSpeed);\r\n            logicTimer.reset();\r\n\r\n            dropCooldown = 25;\r\n            level = (int)(gameSpeed *1.70f);\r\n            spawnPiece();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void renderGame(){\r\n        newFigure.repaint();\r\n        board.repaint();\r\n    }\r\n    private void resetGame(){\r\n        level = 1;\r\n        score = 0;\r\n        gameSpeed = 1.0f;\r\n        nextPiece = Tetrominoe.values()[random.nextInt(TYPE_COUNT)];\r\n        isNewGame = false;\r\n        isGameOver = false;\r\n        board.clear();\r\n        logicTimer.reset();\r\n        logicTimer.setCyclesPerSecond(gameSpeed);\r\n        spawnPiece();\r\n    }\r\n\r\n    private void spawnPiece() {\r\n        currPiece = nextPiece;\r\n        currCol = currPiece.getSpawnColumn();\r\n        currRow = currPiece.getSpawnRow();\r\n        currRotation = 0;\r\n        nextPiece = Tetrominoe.values()[random.nextInt(TYPE_COUNT)];\r\n\r\n        if(!board.isValidAndEmpty(currPiece,currCol,currRow,currRotation)){\r\n            isGameOver = true;\r\n            logicTimer.setPaused(true);\r\n        }\r\n    }\r\n    private void rotatePiece(int newRotation){\r\n        int newColumn = currCol;\r\n        int newRow = currRow;\r\n\r\n        int left = currPiece.getLeftInset(newRotation);\r\n        int top = currPiece.getTopInset(newRotation);\r\n        int right = currPiece.getRightInset(newRotation);\r\n        int bottom = currPiece.getBottomInset(newRotation);\r\n\r\n        if(currCol < -left) {\r\n            newColumn -= currCol - left;\r\n        } else if(currCol + currPiece.getDimension() - right >= BoardPanel.COL_COUNT) {\r\n            newColumn -= (currCol + currPiece.getDimension() - right) - BoardPanel.COL_COUNT + 1;\r\n        }\r\n\r\n        if(currRow < -top) {\r\n            newRow -= currRow - top;\r\n        } else if(currRow + currPiece.getDimension() - bottom >= BoardPanel.ROW_COUNT) {\r\n            newRow -= (currRow + currPiece.getDimension() - bottom) - BoardPanel.ROW_COUNT + 1;\r\n        }\r\n        if(board.isValidAndEmpty(currPiece, newColumn, newRow, newRotation)) {\r\n            currRotation = newRotation;\r\n            currRow = newRow;\r\n            currCol = newColumn;\r\n        }\r\n\r\n    }\r\n\r\n    public String getNickname(){\r\n        return main.player();\r\n    }\r\n\r\n    public boolean isPaused(){\r\n        return isPaused;\r\n    }\r\n\r\n    public boolean isNewGame() {\r\n        return isNewGame;\r\n    }\r\n\r\n    public boolean isGameOver() {\r\n        return isGameOver;\r\n    }\r\n\r\n    public Tetrominoe getPieceType(){\r\n        return currPiece;\r\n    }\r\n\r\n    public int getPieceCol() {\r\n        return currCol;\r\n    }\r\n\r\n    public int getPieceRow() {\r\n        return currRow;\r\n    }\r\n\r\n    public int getPieceRotation() {\r\n        return currRotation;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Presentacion/Tetris1.java b/src/Presentacion/Tetris1.java
--- a/src/Presentacion/Tetris1.java	(revision b7ea6eefad8afb8172a0d513995970f73843bc2a)
+++ b/src/Presentacion/Tetris1.java	(date 1637718804394)
@@ -1,18 +1,13 @@
 package Presentacion;
-
 //import Dominio.Tetrominoe;
-
 import Ayudas.BoardPanel;
 import Ayudas.TileType;
 import Dominio.*;
-
-
 import javax.swing.*;
 import javax.swing.border.CompoundBorder;
 import javax.swing.border.EmptyBorder;
 import javax.swing.border.TitledBorder;
 import java.awt.*;
-
 import java.awt.event.KeyAdapter;
 import java.awt.event.KeyEvent;
 import java.util.Random;
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" default=\"true\" project-jdk-name=\"openjdk-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision b7ea6eefad8afb8172a0d513995970f73843bc2a)
+++ b/.idea/misc.xml	(date 1637718653373)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="openjdk-17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="openjdk-17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"219ng7fLrLYiOThqrYRwlje8R7Z\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.TetrisMain\">\r\n    <configuration name=\"TetrisMain\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Presentacion.TetrisMain\" />\r\n      <module name=\"ProyectoFinal\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"Presentacion.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"main1\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Ayudas.Tetris\" />\r\n      <module name=\"ProyectoFinal\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.main1\" />\r\n      <item itemvalue=\"Application.TetrisMain\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b2d7d353-4d5c-4575-b84c-54a645cdaf76\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1637362279305</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1637362279305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"1\">\r\n      <created>1637378982334</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637378982334</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"1\">\r\n      <created>1637379033699</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637379033699</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"1\">\r\n      <created>1637513655121</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637513655121</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"1\">\r\n      <created>1637514268810</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637514268810</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"1\">\r\n      <created>1637514716557</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637514716557</updated>\r\n    </task>\r\n<<<<<<< HEAD\r\n    <task id=\"LOCAL-00006\" summary=\"s8i\">\r\n      <created>1637517383183</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637517383184</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"7\" />\r\n=======\r\n    <task id=\"LOCAL-00006\" summary=\"1\">\r\n      <created>1637517498248</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637517498248</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"1\">\r\n      <created>1637521359132</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637521359132</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n>>>>>>> dfe0afaf1f8fe6a5f5e74679f1354ffc7fb92082\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"s8i\" />\r\n    <MESSAGE value=\"1\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"1\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/ProyectoFinal$TetrisGUI.ic\" NAME=\"TetrisGUI Coverage Results\" MODIFIED=\"1636317703885\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n    <SUITE FILE_PATH=\"coverage/ProyectoFinal$Tetris.ic\" NAME=\"Tetris Coverage Results\" MODIFIED=\"1636420029275\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>Presentacion.*</FILTER>\r\n    </SUITE>\r\n    <SUITE FILE_PATH=\"coverage/ProyectoFinal$Test2.ic\" NAME=\"Test2 Coverage Results\" MODIFIED=\"1636310506778\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>Presentacion.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b7ea6eefad8afb8172a0d513995970f73843bc2a)
+++ b/.idea/workspace.xml	(date 1637718978561)
@@ -4,6 +4,18 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
+    <list default="true" id="8c85076c-7492-4749-8bb5-52a55e4f65c0" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_11_2021_12_56_p__m___Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_11_2021_12_56_p__m___Default_Changelist_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_11_2021_12_56_p__m___Default_Changelist_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_11_2021_12_56_p__m___Default_Changelist_1.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_11_2021_8_45_p__m___Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_11_2021_8_45_p__m___Default_Changelist_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_11_2021_8_45_p__m___Default_Changelist_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_11_2021_8_45_p__m___Default_Changelist_1.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/Tetris1.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/Tetris1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/TetrisMain.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoFinal/Presentacion/TetrisMain.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Ayudas/Tetris.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Ayudas/Tetris.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Presentacion/Tetris1.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Presentacion/Tetris1.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -110,32 +122,6 @@
       <option name="project" value="LOCAL" />
       <updated>1637514716557</updated>
     </task>
-<<<<<<< HEAD
-    <task id="LOCAL-00006" summary="s8i">
-      <created>1637517383183</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1637517383184</updated>
-    </task>
-    <option name="localTasksCounter" value="7" />
-=======
-    <task id="LOCAL-00006" summary="1">
-      <created>1637517498248</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1637517498248</updated>
-    </task>
-    <task id="LOCAL-00007" summary="1">
-      <created>1637521359132</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1637521359132</updated>
-    </task>
-    <option name="localTasksCounter" value="8" />
->>>>>>> dfe0afaf1f8fe6a5f5e74679f1354ffc7fb92082
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -156,12 +142,12 @@
     <option name="LAST_COMMIT_MESSAGE" value="1" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/ProyectoFinal$TetrisGUI.ic" NAME="TetrisGUI Coverage Results" MODIFIED="1636317703885" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
     <SUITE FILE_PATH="coverage/ProyectoFinal$Tetris.ic" NAME="Tetris Coverage Results" MODIFIED="1636420029275" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>Presentacion.*</FILTER>
     </SUITE>
     <SUITE FILE_PATH="coverage/ProyectoFinal$Test2.ic" NAME="Test2 Coverage Results" MODIFIED="1636310506778" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>Presentacion.*</FILTER>
     </SUITE>
+    <SUITE FILE_PATH="coverage/ProyectoFinal$TetrisGUI.ic" NAME="TetrisGUI Coverage Results" MODIFIED="1636317703885" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
   </component>
 </project>
\ No newline at end of file
